We want to react to the ZX Spectrum as fast as possible
In the background we convert the received data and put it into the serial
buffer

We have interrupts tell us when we should handle ZX Spectrum

We need to send initialization to the printer only after certain time has
passed since reset.
We need to be sending new lines to the printer after a specific time has
elapsed since the previous time or since the initialization.
We can have a timer interrupt calling printer service routine periodically to
check if the time has elapsed. Or we can re-schedule a one-time timer every
time we need to handle the printer and in the interrupt ask the DMA to send
the line.

We can have a fixed line buffer.

We can have 1.5x scaling by doubling every other bit and line.

We can wear our heater out more evenly, if we pick a random horizontal offset
for our unscaled output after each reset.

So, we can have bitmap conversion/scaling done in background, in the main
thread, and have interrupts for data coming from the ZX Spectrum (GPIO pins),
and for printer being ready (general-purpose timer).

The Spectrum interrupt would interpret pin changes and write received data to
a buffer, until it gets a full line. Then it would signal a line is ready.

The printer interrupt would be set up to trigger when the printer is supposed
to be ready, and would send the converted data to the printer. E.g. with DMA.
Or it could signal the background, the main thread, to send it by itself.

So, to have faster bus driving, we need to have a hardware driver and only
have the MCU update the state in the driver and receive the data from the
driver. Oh well, we'll probably need another breadboard for this. The MCU
could keep the current state on its output pins and the bus driver would
update its state whenever it is not being queried by the bus. So we won't need
an interrupt for producing output, we just need to make sure we update all the
outputs at once, which should be possible to do by using a single port for all
the outputs.

Regarding the input, the bus driver should produce an interrupt when new input
is available and then the MCU should sample those inputs on its input pins
within a specific amount of time, which would be less than it's possible for
spectrum to write another state. The bus driver could also take care of
latching the output values until another write is done. We can probably have
an interrupt attached to the SELECT & !RD signal, which would need another
logic gate.

We could probably use one three-state buffer for the output and one basic
buffer for the input, or just two three-state buffers to minimize the
component variety. We don't need big buffers, we only have three inputs and
three outputs, so if we could have a single chip with two separate latches for
two pin groups, that would be good.

We latch the written data to the buffer on SELECT & WR signal, and it stays
always present on the lines going to the MCU. However, the MCU ignores it
until the first write (i.e. SELECT & WR) interrupt is detected.

We latch the read data to the buffer from the MCU pins on SELECT & WR signal,
again, as described in the manual ("D0 and D7 are both latched so that they
remain high until the computer writes something to the printer"). Except we
need to have D6 (presence) to be always low, when the printer is ready, when
driving the bus.

So, we need to preload the values to the output register, so the first read
produces something sensible. We also need to make sure that the interface
powers up with something sensible as well. Maybe we can disable output's OE
until we're ready. We can preload values by disabling the input's OE, driving
the lines we care about and triggering output's LE.

What if we initially have both input and output register's ~OE disabled
(high), and only enable them after we're done initializing and wrote something
sensible to the output register? We would only sample the inputs on an
interrupt triggered by a device write, which would only be enabled after we're
ready.

So the MCU needs the following lines:

* OUTPUT_LE     - to load the output register with the initial values
* ~READY        - pulled high with a resistor, to pull low when ready, which
                  would enable both input and output
* DEVICE_WR     - to trigger a write interrupt and sample the latched inputs
* STYLUS        - to sample the "stylus power" input
* PAPER         - to signal "paper detected" state
* ENCODER       - to signal the "encoder" state
* MOTOR_SLOW    - to initially signal and then sample the "motor slow" state
* MOTOR_STOP    - to initially signal and then sample the "motor stop" state

Ah, wait, we need the ENCODER and PAPER signals to be able to go down only
when a write is happening. So we need to have some sort of flip-flop, which
can only be set to one, normally, and would accept zero only in the presence
of another signal.

I.e. if A is the input, and C is that control signal, Q is the current state,
and Q' is the next state:

A   C   Q   Q'
0   0   0   0
0   0   1   1
0   1   0   0
0   1   1   0
1   0   0   1
1   0   1   1
1   1   0   1
1   1   1   1

Or:

Q' = (C & A) | (~C & (Q | A)) = C&A | ~C&Q | ~C&A = ~C & Q | A

With NOR gates:

Q' = ~~(~(C | ~Q) | A)

With NAND gates:

Q' = ~(~(~C & Q) & ~A)

Now, how do we initialize the MOTOR_SLOW/MOTOR_STOP/STYLUS inputs?
Let's say X is the initializing MCU input, Y is the bus input, and C is the
control input, meaning zero for the X input and one for the Y input, and Q is
the output going to the latch. Then

Q = X & ~C | Y & C

With NAND gates:

Q = ~(~(X & ~C) & ~(Y & C))

And that's for every input, which is a lot. Can we just try to live with the
non-initialized inputs? Assuming that the latch initializes to zero, that
would be motor is on full-speed at the start, but the stylus is off. We can
initialize the MCU from that instead and let the host do its own
initialization, or rather we shouldn't try to interpret anything until the
first write.

So, after refining, here are the MCU signals:

* READY         - pulled low with a resistor, to pull high when ready, which
                  would allow output to react to DEVICE_RD
* DEVICE_WR     - to trigger a write interrupt and sample the latched inputs
* STYLUS        - to sample the "stylus power" input
* PAPER         - to signal "paper detected" state
* ENCODER       - to signal the "encoder" state
* MOTOR_SLOW    - to sample the "motor slow" state
* MOTOR_STOP    - to sample the "motor stop" state

OK, let's rename MOTOR_STOP to MOTOR_OFF, as it is level-triggered.

So, our job is to update PAPER and ENCODER based on the MOTOR_OFF and
MOTOR_SLOW. As well as record a dot each period PAPER && ENCODER are true. We
can record the dot when PAPER && ENCODER && !MOTOR_OFF go from true to false.
And the value of the dot would be on if it was ever on during that period

OK, interrupt latency brings another problem: the host writes the stylus state
to the port when it thinks that the encoder signal is high. However, by the
time the MCU reads the stylus state and checks the encoder and paper state,
the two latter might have changed, invalidating host input. We latch the host
input in the input latch, at the time of writing, but we don't latch the
encoder state. We need to capture that as well. We have extra pins on the
input latch and we can use that. We can also e.g. have an ADC sample and store
the state of the stylus signal for us at the time of write, but that would be
just emulating a latch.

Could we maybe use a similar latch we've built for PAPER and ENCODER signals?
How does it even work in the original, or how could it work? The service
manual says that the encoder&paper signal is used as the clock for the buffer,
but it doesn't say if the clock makes the buffer store the input on an edge or
on a level. Given that the computer is reacting to the encoder signal and that
it will always be late for the rising edge, the buffer must store on the high
level or on the falling edge.

What if instead updating the stylus state in the write handler, we simply
sampled the stylus pin on the falling edge of the encoder in the timer
handler? That might work.

An alternative could be to make a latch that would latch high, and only allow
itself to go down when the encoder signal is low. That would be similar to
what we do with the paper and encoder signals, for the host. Or rather, that
doesn't have to be an alternative, but an addition to the above. That would
let us have the stylus capture at the time the encoder is high, while not
requiring an internal state update in the write handler.

We won't even need a "dot state" and a "stylus state" variables, we would be
able to just sample that latch when the encoder signal goes down. That would
simplify interrupt handling even further! Then the write handler would only
need to take care of controlling the "motor"!

So, what would that latch look like?

STYLUS  ENC     DOT     DOT'
0       0       0       0
0       0       1       0
0       1       0       0
0       1       1       1
1       0       0       1
1       0       1       1
1       1       0       1
1       1       1       1

Thus:

DOT' = (!ENC & STYLUS) | (ENC & (DOT | STYLUS)) =
= !ENC & STYLUS | ENC & DOT | ENC & STYLUS = STYLUS | ENC & DOT

Waait, we don't operate on just encoder here, it should be ENCODER & PAPER.
So it becomes:

DOT' = STYLUS | (ENCODER & PAPER) & DOT

And now we have to redo our PAPER and ENCODER latches to provide that ENCODER &
PAPER signal.

With NOR gates:

DOT' = !!(STYLUS | !(!(ENCODER & PAPER) | !DOT))

With NAND gates:

DOT' = !(!STYLUS & !((ENCODER & PAPER) & DOT))

If we use a NAND gate to get an !ENCODER_PAPER signal from ENCODER and PAPER,
and we use !DOT instead of DOT, then we can write it this way:

!DOT' = !(STYLUS | !(!ENCODER_PAPER | !DOT))

Or we can designate the signal fully as DOT_LATCH, so:

!DOT_LATCH' = !(STYLUS | !(!ENCODER_PAPER | !DOT_LATCH))

Let's try to minimize the number of gates for ENCODER_PAPER_LATCH, which is
fed !ENCODER_PAPER and WRITE signals.

ENCODER_PAPER_LATCH' = !WRITE & ENCODER_PAPER_LATCH | !NOT_ENCODER_PAPER

ENCODER_PAPER_LATCH' = !!(!WRITE & ENCODER_PAPER_LATCH) | !NOT_ENCODER_PAPER

With two NAND gates and one invertor:
ENCODER_PAPER_LATCH' = !(!(!WRITE & ENCODER_PAPER_LATCH) & NOT_ENCODER_PAPER)
or, for clarity:
ENCODER_PAPER_LATCH' = !(!(!WRITE & ENCODER_PAPER_LATCH) & (!ENCODER_PAPER))

And a truth table to check:
ENCODER_PAPER   WRITE   ENCODER_PAPER_LATCH     ENCODER_PAPER_LATCH'
0               0       0                       0
0               0       1                       1
0               1       0                       0
0               1       1                       0
1               0       0                       1
1               0       1                       1
1               1       0                       1
1               1       1                       1

Seems correct! One less gate compared to NOR gates

ENCODER_PAPER_LATCH' = !(!(NOT_WRITE & ENCODER_PAPER_LATCH) & NOT_ENCODER_PAPER)

OK, after further experiments and reading the ROM disassembly more carefully,
it seems that bits zero and seven, ENCODER_PAPER_LATCH and PAPER_LATCH should
be set to zero on every write regardless of the state of the encoder or paper.
I.e. the host doesn't wait for the ENCODER_PAPER_LATCH to go zero and then
back to one, it simply waits for it to be one before outputting a dot. We need
to redo our logic to have those reset on write, and set on rising edge of
ENCODER_PAPER and PAPER signal respectively.

----

So, we can keep emulating the original timing, i.e. speed of the printer, but
we still need to latch the value written. I.e. the MOTOR_SLOW, MOTOR_OFF, and
the STYLUS. We need to simply latch the encoder and paper signals high with
the timer, and reset them to zero with the write signal.

So, signal-by-signal:

D0  - reads PAPER & ENCODER. Latched high by timer, reset by WRITE
D6  - reads !READY
D7  - reads PAPER | STYLUS. PAPER is latched high by timer, reset by WRITE

D2  - high level written stops the motor timer, low level starts it, motor is
      stopped on power-on
D1  - high level written means slow motor timer, low level means normal motor
      timer, normal speed on power-on
D7  - stylus power on, remains latched, low on power-on

How do we make sure the MCU gets the right value of the dot by the time it
responds to the interrupt?
The host never actually knows what the current status of the encoder and paper
is. Neither does the original printer care about it, because it has a line
buffer. What we should only care about is only raising the encoder pin when we
actually processed the previous write by remembering the dot value. We can
take as long as we want to remember it, as long as we don't raise the
encoder&paper pin high before we're done and ready to receive the next one.
The host is not supposed to write any dot values while that is low, so we
don't have to respond to those writes at all.

Should we maybe ignore dot changes when the PAPER & ENCODER latch is low? Yes,
if only to ignore e.g. the instruction to start or to stop the motor.

Actually, it's the other way around. Once the motor (timer) is started, for
each PAPER&ENCODER signal going down, we should sample the latest value of
STYLUS and record it.

The interface should simply record the STYLUS value.

D0_ENCODER = LATCHED(PAPER&ENCODER)
D6_PRESENT = !READY
D7_STYLUS_PAPER = STYLUS | LATCHED(PAPER)

For these latches we need the following logic:
set only on the rising edge (of PAPER&ENCODER or just PAPER), reset only when
WRITE is high (the level or either edge is fine), and if both are high, then
reset.

So, let's say the input (PAPER&ENCODER or PAPER) is S, the reset signal is R,
the current output is O, and the next output is O'. Then:

I   R   O   O'

0   0   0   0
0   0   1   1
0   1   0   0
0   1   1   0
1   0   0   1

Wait, we should simply not set ENCODER output high until we finished recording
the write. Ah, but what if the timer interrupt raced the WRITE interrupt?

Wait, let's try setting the signals on rising edge only again.

I.e. we need a latch, which can be set by a rising edge of the input, and
reset by a rising edge of the write signal.


'I  I   'R  R   'O  O
0   0   0   0   0   0
0   0   0   0   1   1
0   0   0   1   0   0
0   0   0   1   1   0
0   0   1   0   0   0
0   0   1   0   1   1
0   0   1   1   0   0
0   0   1   1   1   1
0   1   0   0   0   1
0   1   0   0   1   1
0   1   0   1   0   1   Input wins over reset!
0   1   0   1   1   1   Input wins over reset!
0   1   1   0   0   1
0   1   1   0   1   1
0   1   1   1   0   1
0   1   1   1   1   1
1   0   0   0   0   0
1   0   0   0   1   1
1   0   0   1   0   0
1   0   0   1   1   0
1   0   1   0   0   0
1   0   1   0   1   1
1   0   1   1   0   0
1   0   1   1   1   1
1   1   0   0   0   0
1   1   0   0   1   1
1   1   0   1   0   0
1   1   0   1   1   0
1   1   1   0   0   0
1   1   1   0   1   1
1   1   1   1   0   0
1   1   1   1   1   1

If we say that IU and RU are input-up and reset-up conditions, then we can
write this shorter:

IU  RU  'O  O
0   0   0   0
0   0   1   1
0   1   0   0
0   1   1   0
1   0   0   1
1   0   1   1
1   1   0   1   Input wins over reset!
1   1   1   1   Input wins over reset!

OK, this might get complicated quickly. Are we sure we can't do it with
levels? Since we get a conflict anyway? How about, if we have both reset and
input set, input wins and that's it?

So:

I   R   'O  O
0   0   0   0
0   0   1   1
0   1   0   0
0   1   1   0
1   0   0   1
1   0   1   1
1   1   0   1   Input wins over reset!
1   1   1   1   Input wins over reset!

Wait, no, in this case we should have reset win over input. And then we're
back to the situation that when reset is deasserted, input affects the output
again, and that's not what we need. We need a write to clear current input
event, so that the host can wait for another. That's why we introduced
edge-triggered latching above.

However, we might not have parts for implementing edge triggering, and
it would take a lot of basic logic gates to construct one, and we need two.
We have a lot of outputs from the MCU, though. Can we simplify the logic if we
had pulse outputs for bringing the PAPER and ENCODER signals up and down, and
guarantee the counterparts can never be asserted together?

I still can't believe we need to be this complex...

Wait, do we ever need to reset the PAPER and ENCODER signals ourselves? No,
both of them are to be reset by the host. So we can simply make them
pulse-set, and have the pulse win over the write-high. Or maybe make them
edge-triggered after all. Can we maybe abuse some of the MCU circuitry to make
the edge-triggered output?

Or maybe we could just buy edge-triggered flip-flops, like 74LS175.

Or, could we simply clear the outputs on detecting the write signal in the
MCU? We should be able to outrun the host issuing a follow-up read, won't we?
Sounds good. We won't have the learning opportunity, but we could save time
and money on building the necessary circuit.

---

We now have both the interfaces working separately and it's time to connect
them. We can have the ZX Printer interface store the input in a buffer, and
have another buffer for the output, so that we can center or scale it, if
necessary.

We will also have a problem with timing, because even the standard ZX Printer
speed is faster than what 9600 baud of the thermal printer interface would
allow, and we could make the former go much faster.

We can have a big buffer in our RAM, plus employ flow control on the ZX
Printer side. We can even have e.g. RLE or even LZW compression for the input
if we really want to have a bigger buffer.

Ultimately, though, we'll have to slow down the input once our buffer is full,
and we can do that by raising a flag inside the ZX Printer module to ask it to
wait before starting inputting the line.

Lastly, we need to deal with the matter of the ZX Printer turning off the
motor before the clock goes down and us not completing a line, which could be
fixed by moving the motor power and speed control to the timer interrupt
handler.

So, we could have another bit for clock being flipped before we would advance
the cycle step.
